// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.0
// source: recognition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "recognition";

/** Пустое сообщение для запросов без параметров */
export interface Empty {
}

/** Модель распознавания */
export interface Model {
  /** Имя модели */
  name: string;
  /** Описание модели (опционально) */
  description: string;
}

/** Ответ на запрос списка моделей */
export interface ModelsResponse {
  models: Model[];
}

/** Конфигурация распознавания */
export interface RecognitionConfig {
  model: string;
  fileName: string;
  enableAutomaticPunctuation: boolean;
  silAfterWordTimeoutMs: number;
  sampleRate: number;
  enableAnswerphoneDetection: boolean;
  enableSentimentsDetection: boolean;
  /** Добавьте остальные поля по необходимости */
  enableAgeIdentification: boolean;
}

/** Запрос для потокового распознавания */
export interface StreamingRecognitionRequest {
  config: RecognitionConfig | undefined;
  audioContent: Uint8Array;
  onlyNew: boolean;
}

/** Ответ от потокового распознавания */
export interface StreamingRecognitionResponse {
  chunks: SpeechRecognitionChunk[];
  sessionId: string;
  text: string;
  final: boolean;
  qualityScore: number;
  answerphoneDetected: boolean;
  sentimentsInfo: SentimentsInfo | undefined;
  wordsPerSecond: number;
  ageGroup: string;
}

/** Другие необходимые сообщения */
export interface SpeechRecognitionChunk {
}

/** Определите поля */
export interface SentimentsInfo {
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseModel(): Model {
  return { name: "", description: "" };
}

export const Model: MessageFns<Model> = {
  encode(message: Model, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Model {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Model {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Model): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Model>, I>>(base?: I): Model {
    return Model.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Model>, I>>(object: I): Model {
    const message = createBaseModel();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseModelsResponse(): ModelsResponse {
  return { models: [] };
}

export const ModelsResponse: MessageFns<ModelsResponse> = {
  encode(message: ModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.models) {
      Model.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.models.push(Model.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelsResponse {
    return { models: globalThis.Array.isArray(object?.models) ? object.models.map((e: any) => Model.fromJSON(e)) : [] };
  },

  toJSON(message: ModelsResponse): unknown {
    const obj: any = {};
    if (message.models?.length) {
      obj.models = message.models.map((e) => Model.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModelsResponse>, I>>(base?: I): ModelsResponse {
    return ModelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModelsResponse>, I>>(object: I): ModelsResponse {
    const message = createBaseModelsResponse();
    message.models = object.models?.map((e) => Model.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecognitionConfig(): RecognitionConfig {
  return {
    model: "",
    fileName: "",
    enableAutomaticPunctuation: false,
    silAfterWordTimeoutMs: 0,
    sampleRate: 0,
    enableAnswerphoneDetection: false,
    enableSentimentsDetection: false,
    enableAgeIdentification: false,
  };
}

export const RecognitionConfig: MessageFns<RecognitionConfig> = {
  encode(message: RecognitionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.enableAutomaticPunctuation !== false) {
      writer.uint32(24).bool(message.enableAutomaticPunctuation);
    }
    if (message.silAfterWordTimeoutMs !== 0) {
      writer.uint32(32).uint32(message.silAfterWordTimeoutMs);
    }
    if (message.sampleRate !== 0) {
      writer.uint32(40).uint32(message.sampleRate);
    }
    if (message.enableAnswerphoneDetection !== false) {
      writer.uint32(48).bool(message.enableAnswerphoneDetection);
    }
    if (message.enableSentimentsDetection !== false) {
      writer.uint32(56).bool(message.enableSentimentsDetection);
    }
    if (message.enableAgeIdentification !== false) {
      writer.uint32(64).bool(message.enableAgeIdentification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecognitionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecognitionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableAutomaticPunctuation = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.silAfterWordTimeoutMs = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sampleRate = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enableAnswerphoneDetection = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enableSentimentsDetection = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enableAgeIdentification = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecognitionConfig {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      enableAutomaticPunctuation: isSet(object.enableAutomaticPunctuation)
        ? globalThis.Boolean(object.enableAutomaticPunctuation)
        : false,
      silAfterWordTimeoutMs: isSet(object.silAfterWordTimeoutMs) ? globalThis.Number(object.silAfterWordTimeoutMs) : 0,
      sampleRate: isSet(object.sampleRate) ? globalThis.Number(object.sampleRate) : 0,
      enableAnswerphoneDetection: isSet(object.enableAnswerphoneDetection)
        ? globalThis.Boolean(object.enableAnswerphoneDetection)
        : false,
      enableSentimentsDetection: isSet(object.enableSentimentsDetection)
        ? globalThis.Boolean(object.enableSentimentsDetection)
        : false,
      enableAgeIdentification: isSet(object.enableAgeIdentification)
        ? globalThis.Boolean(object.enableAgeIdentification)
        : false,
    };
  },

  toJSON(message: RecognitionConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.enableAutomaticPunctuation !== false) {
      obj.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
    }
    if (message.silAfterWordTimeoutMs !== 0) {
      obj.silAfterWordTimeoutMs = Math.round(message.silAfterWordTimeoutMs);
    }
    if (message.sampleRate !== 0) {
      obj.sampleRate = Math.round(message.sampleRate);
    }
    if (message.enableAnswerphoneDetection !== false) {
      obj.enableAnswerphoneDetection = message.enableAnswerphoneDetection;
    }
    if (message.enableSentimentsDetection !== false) {
      obj.enableSentimentsDetection = message.enableSentimentsDetection;
    }
    if (message.enableAgeIdentification !== false) {
      obj.enableAgeIdentification = message.enableAgeIdentification;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecognitionConfig>, I>>(base?: I): RecognitionConfig {
    return RecognitionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecognitionConfig>, I>>(object: I): RecognitionConfig {
    const message = createBaseRecognitionConfig();
    message.model = object.model ?? "";
    message.fileName = object.fileName ?? "";
    message.enableAutomaticPunctuation = object.enableAutomaticPunctuation ?? false;
    message.silAfterWordTimeoutMs = object.silAfterWordTimeoutMs ?? 0;
    message.sampleRate = object.sampleRate ?? 0;
    message.enableAnswerphoneDetection = object.enableAnswerphoneDetection ?? false;
    message.enableSentimentsDetection = object.enableSentimentsDetection ?? false;
    message.enableAgeIdentification = object.enableAgeIdentification ?? false;
    return message;
  },
};

function createBaseStreamingRecognitionRequest(): StreamingRecognitionRequest {
  return { config: undefined, audioContent: new Uint8Array(0), onlyNew: false };
}

export const StreamingRecognitionRequest: MessageFns<StreamingRecognitionRequest> = {
  encode(message: StreamingRecognitionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      RecognitionConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    if (message.audioContent.length !== 0) {
      writer.uint32(18).bytes(message.audioContent);
    }
    if (message.onlyNew !== false) {
      writer.uint32(24).bool(message.onlyNew);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingRecognitionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingRecognitionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = RecognitionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audioContent = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.onlyNew = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingRecognitionRequest {
    return {
      config: isSet(object.config) ? RecognitionConfig.fromJSON(object.config) : undefined,
      audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : new Uint8Array(0),
      onlyNew: isSet(object.onlyNew) ? globalThis.Boolean(object.onlyNew) : false,
    };
  },

  toJSON(message: StreamingRecognitionRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = RecognitionConfig.toJSON(message.config);
    }
    if (message.audioContent.length !== 0) {
      obj.audioContent = base64FromBytes(message.audioContent);
    }
    if (message.onlyNew !== false) {
      obj.onlyNew = message.onlyNew;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingRecognitionRequest>, I>>(base?: I): StreamingRecognitionRequest {
    return StreamingRecognitionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingRecognitionRequest>, I>>(object: I): StreamingRecognitionRequest {
    const message = createBaseStreamingRecognitionRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? RecognitionConfig.fromPartial(object.config)
      : undefined;
    message.audioContent = object.audioContent ?? new Uint8Array(0);
    message.onlyNew = object.onlyNew ?? false;
    return message;
  },
};

function createBaseStreamingRecognitionResponse(): StreamingRecognitionResponse {
  return {
    chunks: [],
    sessionId: "",
    text: "",
    final: false,
    qualityScore: 0,
    answerphoneDetected: false,
    sentimentsInfo: undefined,
    wordsPerSecond: 0,
    ageGroup: "",
  };
}

export const StreamingRecognitionResponse: MessageFns<StreamingRecognitionResponse> = {
  encode(message: StreamingRecognitionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.chunks) {
      SpeechRecognitionChunk.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.sessionId !== "") {
      writer.uint32(18).string(message.sessionId);
    }
    if (message.text !== "") {
      writer.uint32(26).string(message.text);
    }
    if (message.final !== false) {
      writer.uint32(32).bool(message.final);
    }
    if (message.qualityScore !== 0) {
      writer.uint32(45).float(message.qualityScore);
    }
    if (message.answerphoneDetected !== false) {
      writer.uint32(48).bool(message.answerphoneDetected);
    }
    if (message.sentimentsInfo !== undefined) {
      SentimentsInfo.encode(message.sentimentsInfo, writer.uint32(58).fork()).join();
    }
    if (message.wordsPerSecond !== 0) {
      writer.uint32(69).float(message.wordsPerSecond);
    }
    if (message.ageGroup !== "") {
      writer.uint32(74).string(message.ageGroup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingRecognitionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingRecognitionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunks.push(SpeechRecognitionChunk.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.final = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.qualityScore = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.answerphoneDetected = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sentimentsInfo = SentimentsInfo.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.wordsPerSecond = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.ageGroup = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingRecognitionResponse {
    return {
      chunks: globalThis.Array.isArray(object?.chunks)
        ? object.chunks.map((e: any) => SpeechRecognitionChunk.fromJSON(e))
        : [],
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      final: isSet(object.final) ? globalThis.Boolean(object.final) : false,
      qualityScore: isSet(object.qualityScore) ? globalThis.Number(object.qualityScore) : 0,
      answerphoneDetected: isSet(object.answerphoneDetected) ? globalThis.Boolean(object.answerphoneDetected) : false,
      sentimentsInfo: isSet(object.sentimentsInfo) ? SentimentsInfo.fromJSON(object.sentimentsInfo) : undefined,
      wordsPerSecond: isSet(object.wordsPerSecond) ? globalThis.Number(object.wordsPerSecond) : 0,
      ageGroup: isSet(object.ageGroup) ? globalThis.String(object.ageGroup) : "",
    };
  },

  toJSON(message: StreamingRecognitionResponse): unknown {
    const obj: any = {};
    if (message.chunks?.length) {
      obj.chunks = message.chunks.map((e) => SpeechRecognitionChunk.toJSON(e));
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.final !== false) {
      obj.final = message.final;
    }
    if (message.qualityScore !== 0) {
      obj.qualityScore = message.qualityScore;
    }
    if (message.answerphoneDetected !== false) {
      obj.answerphoneDetected = message.answerphoneDetected;
    }
    if (message.sentimentsInfo !== undefined) {
      obj.sentimentsInfo = SentimentsInfo.toJSON(message.sentimentsInfo);
    }
    if (message.wordsPerSecond !== 0) {
      obj.wordsPerSecond = message.wordsPerSecond;
    }
    if (message.ageGroup !== "") {
      obj.ageGroup = message.ageGroup;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingRecognitionResponse>, I>>(base?: I): StreamingRecognitionResponse {
    return StreamingRecognitionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingRecognitionResponse>, I>>(object: I): StreamingRecognitionResponse {
    const message = createBaseStreamingRecognitionResponse();
    message.chunks = object.chunks?.map((e) => SpeechRecognitionChunk.fromPartial(e)) || [];
    message.sessionId = object.sessionId ?? "";
    message.text = object.text ?? "";
    message.final = object.final ?? false;
    message.qualityScore = object.qualityScore ?? 0;
    message.answerphoneDetected = object.answerphoneDetected ?? false;
    message.sentimentsInfo = (object.sentimentsInfo !== undefined && object.sentimentsInfo !== null)
      ? SentimentsInfo.fromPartial(object.sentimentsInfo)
      : undefined;
    message.wordsPerSecond = object.wordsPerSecond ?? 0;
    message.ageGroup = object.ageGroup ?? "";
    return message;
  },
};

function createBaseSpeechRecognitionChunk(): SpeechRecognitionChunk {
  return {};
}

export const SpeechRecognitionChunk: MessageFns<SpeechRecognitionChunk> = {
  encode(_: SpeechRecognitionChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeechRecognitionChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeechRecognitionChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SpeechRecognitionChunk {
    return {};
  },

  toJSON(_: SpeechRecognitionChunk): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SpeechRecognitionChunk>, I>>(base?: I): SpeechRecognitionChunk {
    return SpeechRecognitionChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpeechRecognitionChunk>, I>>(_: I): SpeechRecognitionChunk {
    const message = createBaseSpeechRecognitionChunk();
    return message;
  },
};

function createBaseSentimentsInfo(): SentimentsInfo {
  return {};
}

export const SentimentsInfo: MessageFns<SentimentsInfo> = {
  encode(_: SentimentsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SentimentsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSentimentsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SentimentsInfo {
    return {};
  },

  toJSON(_: SentimentsInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SentimentsInfo>, I>>(base?: I): SentimentsInfo {
    return SentimentsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SentimentsInfo>, I>>(_: I): SentimentsInfo {
    const message = createBaseSentimentsInfo();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
