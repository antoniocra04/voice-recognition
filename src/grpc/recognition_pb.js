// source: recognition.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.recognition.Empty', null, global);
goog.exportSymbol('proto.recognition.Model', null, global);
goog.exportSymbol('proto.recognition.ModelsResponse', null, global);
goog.exportSymbol('proto.recognition.RecognitionConfig', null, global);
goog.exportSymbol('proto.recognition.SentimentsInfo', null, global);
goog.exportSymbol('proto.recognition.SpeechRecognitionChunk', null, global);
goog.exportSymbol('proto.recognition.StreamingRecognitionRequest', null, global);
goog.exportSymbol('proto.recognition.StreamingRecognitionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.Empty.displayName = 'proto.recognition.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.Model = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.Model.displayName = 'proto.recognition.Model';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.ModelsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.recognition.ModelsResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.recognition.ModelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.ModelsResponse.displayName = 'proto.recognition.ModelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.RecognitionConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.RecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.RecognitionConfig.displayName = 'proto.recognition.RecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.StreamingRecognitionRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.StreamingRecognitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.StreamingRecognitionRequest.displayName =
    'proto.recognition.StreamingRecognitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.StreamingRecognitionResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.recognition.StreamingRecognitionResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.recognition.StreamingRecognitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.StreamingRecognitionResponse.displayName =
    'proto.recognition.StreamingRecognitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.SpeechRecognitionChunk = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.SpeechRecognitionChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.SpeechRecognitionChunk.displayName = 'proto.recognition.SpeechRecognitionChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recognition.SentimentsInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recognition.SentimentsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.recognition.SentimentsInfo.displayName = 'proto.recognition.SentimentsInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.Empty.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.Empty.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.Empty}
 */
proto.recognition.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.Empty();
  return proto.recognition.Empty.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.Empty}
 */
proto.recognition.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.Model.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.Model.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.Model} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.Model.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        description: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.Model}
 */
proto.recognition.Model.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.Model();
  return proto.recognition.Model.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.Model}
 */
proto.recognition.Model.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.Model.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.Model} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.Model.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.recognition.Model.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.Model} returns this
 */
proto.recognition.Model.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string description = 2;
 * @return {string}
 */
proto.recognition.Model.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.Model} returns this
 */
proto.recognition.Model.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recognition.ModelsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.ModelsResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.ModelsResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.ModelsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.ModelsResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        modelsList: jspb.Message.toObjectList(
          msg.getModelsList(),
          proto.recognition.Model.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.ModelsResponse}
 */
proto.recognition.ModelsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.ModelsResponse();
  return proto.recognition.ModelsResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.ModelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.ModelsResponse}
 */
proto.recognition.ModelsResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.recognition.Model();
        reader.readMessage(value, proto.recognition.Model.deserializeBinaryFromReader);
        msg.addModels(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.ModelsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.ModelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.ModelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.ModelsResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.recognition.Model.serializeBinaryToWriter);
  }
};

/**
 * repeated Model models = 1;
 * @return {!Array<!proto.recognition.Model>}
 */
proto.recognition.ModelsResponse.prototype.getModelsList = function () {
  return /** @type{!Array<!proto.recognition.Model>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recognition.Model, 1)
  );
};

/**
 * @param {!Array<!proto.recognition.Model>} value
 * @return {!proto.recognition.ModelsResponse} returns this
 */
proto.recognition.ModelsResponse.prototype.setModelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.recognition.Model=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recognition.Model}
 */
proto.recognition.ModelsResponse.prototype.addModels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.recognition.Model,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recognition.ModelsResponse} returns this
 */
proto.recognition.ModelsResponse.prototype.clearModelsList = function () {
  return this.setModelsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.RecognitionConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.RecognitionConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.RecognitionConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.RecognitionConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        model: jspb.Message.getFieldWithDefault(msg, 1, ''),
        fileName: jspb.Message.getFieldWithDefault(msg, 2, ''),
        enableAutomaticPunctuation: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        silAfterWordTimeoutMs: jspb.Message.getFieldWithDefault(msg, 4, 0),
        sampleRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
        enableAnswerphoneDetection: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        enableSentimentsDetection: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        enableAgeIdentification: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.RecognitionConfig}
 */
proto.recognition.RecognitionConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.RecognitionConfig();
  return proto.recognition.RecognitionConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.RecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.RecognitionConfig}
 */
proto.recognition.RecognitionConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setModel(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFileName(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setEnableAutomaticPunctuation(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSilAfterWordTimeoutMs(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSampleRate(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setEnableAnswerphoneDetection(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setEnableSentimentsDetection(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setEnableAgeIdentification(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.RecognitionConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.RecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.RecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.RecognitionConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEnableAutomaticPunctuation();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getSilAfterWordTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getEnableAnswerphoneDetection();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getEnableSentimentsDetection();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getEnableAgeIdentification();
  if (f) {
    writer.writeBool(8, f);
  }
};

/**
 * optional string model = 1;
 * @return {string}
 */
proto.recognition.RecognitionConfig.prototype.getModel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setModel = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.recognition.RecognitionConfig.prototype.getFileName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setFileName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool enable_automatic_punctuation = 3;
 * @return {boolean}
 */
proto.recognition.RecognitionConfig.prototype.getEnableAutomaticPunctuation = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setEnableAutomaticPunctuation = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional uint32 sil_after_word_timeout_ms = 4;
 * @return {number}
 */
proto.recognition.RecognitionConfig.prototype.getSilAfterWordTimeoutMs = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setSilAfterWordTimeoutMs = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint32 sample_rate = 5;
 * @return {number}
 */
proto.recognition.RecognitionConfig.prototype.getSampleRate = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setSampleRate = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bool enable_answerphone_detection = 6;
 * @return {boolean}
 */
proto.recognition.RecognitionConfig.prototype.getEnableAnswerphoneDetection = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setEnableAnswerphoneDetection = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * optional bool enable_sentiments_detection = 7;
 * @return {boolean}
 */
proto.recognition.RecognitionConfig.prototype.getEnableSentimentsDetection = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setEnableSentimentsDetection = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool enable_age_identification = 8;
 * @return {boolean}
 */
proto.recognition.RecognitionConfig.prototype.getEnableAgeIdentification = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.RecognitionConfig} returns this
 */
proto.recognition.RecognitionConfig.prototype.setEnableAgeIdentification = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.StreamingRecognitionRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.recognition.StreamingRecognitionRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.StreamingRecognitionRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.StreamingRecognitionRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        config:
          (f = msg.getConfig()) && proto.recognition.RecognitionConfig.toObject(includeInstance, f),
        audioContent: msg.getAudioContent_asB64(),
        onlyNew: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.StreamingRecognitionRequest}
 */
proto.recognition.StreamingRecognitionRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.StreamingRecognitionRequest();
  return proto.recognition.StreamingRecognitionRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.StreamingRecognitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.StreamingRecognitionRequest}
 */
proto.recognition.StreamingRecognitionRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.recognition.RecognitionConfig();
        reader.readMessage(value, proto.recognition.RecognitionConfig.deserializeBinaryFromReader);
        msg.setConfig(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAudioContent(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setOnlyNew(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.StreamingRecognitionRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.StreamingRecognitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.StreamingRecognitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.StreamingRecognitionRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(1, f, proto.recognition.RecognitionConfig.serializeBinaryToWriter);
  }
  f = message.getAudioContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getOnlyNew();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.recognition.RecognitionConfig}
 */
proto.recognition.StreamingRecognitionRequest.prototype.getConfig = function () {
  return /** @type{?proto.recognition.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.recognition.RecognitionConfig, 1)
  );
};

/**
 * @param {?proto.recognition.RecognitionConfig|undefined} value
 * @return {!proto.recognition.StreamingRecognitionRequest} returns this
 */
proto.recognition.StreamingRecognitionRequest.prototype.setConfig = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.recognition.StreamingRecognitionRequest} returns this
 */
proto.recognition.StreamingRecognitionRequest.prototype.clearConfig = function () {
  return this.setConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recognition.StreamingRecognitionRequest.prototype.hasConfig = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes audio_content = 2;
 * @return {string}
 */
proto.recognition.StreamingRecognitionRequest.prototype.getAudioContent = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes audio_content = 2;
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {string}
 */
proto.recognition.StreamingRecognitionRequest.prototype.getAudioContent_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAudioContent()));
};

/**
 * optional bytes audio_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {!Uint8Array}
 */
proto.recognition.StreamingRecognitionRequest.prototype.getAudioContent_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAudioContent()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.recognition.StreamingRecognitionRequest} returns this
 */
proto.recognition.StreamingRecognitionRequest.prototype.setAudioContent = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bool only_new = 3;
 * @return {boolean}
 */
proto.recognition.StreamingRecognitionRequest.prototype.getOnlyNew = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.StreamingRecognitionRequest} returns this
 */
proto.recognition.StreamingRecognitionRequest.prototype.setOnlyNew = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recognition.StreamingRecognitionResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.StreamingRecognitionResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.recognition.StreamingRecognitionResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.StreamingRecognitionResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.StreamingRecognitionResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chunksList: jspb.Message.toObjectList(
          msg.getChunksList(),
          proto.recognition.SpeechRecognitionChunk.toObject,
          includeInstance
        ),
        sessionId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        text: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pb_final: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        qualityScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        answerphoneDetected: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        sentimentsInfo:
          (f = msg.getSentimentsInfo()) &&
          proto.recognition.SentimentsInfo.toObject(includeInstance, f),
        wordsPerSecond: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
        ageGroup: jspb.Message.getFieldWithDefault(msg, 9, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.StreamingRecognitionResponse}
 */
proto.recognition.StreamingRecognitionResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.StreamingRecognitionResponse();
  return proto.recognition.StreamingRecognitionResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.StreamingRecognitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.StreamingRecognitionResponse}
 */
proto.recognition.StreamingRecognitionResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.recognition.SpeechRecognitionChunk();
        reader.readMessage(
          value,
          proto.recognition.SpeechRecognitionChunk.deserializeBinaryFromReader
        );
        msg.addChunks(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSessionId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setText(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setFinal(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setQualityScore(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setAnswerphoneDetected(value);
        break;
      case 7:
        var value = new proto.recognition.SentimentsInfo();
        reader.readMessage(value, proto.recognition.SentimentsInfo.deserializeBinaryFromReader);
        msg.setSentimentsInfo(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setWordsPerSecond(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setAgeGroup(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.StreamingRecognitionResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.StreamingRecognitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.StreamingRecognitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.StreamingRecognitionResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.recognition.SpeechRecognitionChunk.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFinal();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getQualityScore();
  if (f !== 0.0) {
    writer.writeFloat(5, f);
  }
  f = message.getAnswerphoneDetected();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getSentimentsInfo();
  if (f != null) {
    writer.writeMessage(7, f, proto.recognition.SentimentsInfo.serializeBinaryToWriter);
  }
  f = message.getWordsPerSecond();
  if (f !== 0.0) {
    writer.writeFloat(8, f);
  }
  f = message.getAgeGroup();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
};

/**
 * repeated SpeechRecognitionChunk chunks = 1;
 * @return {!Array<!proto.recognition.SpeechRecognitionChunk>}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getChunksList = function () {
  return /** @type{!Array<!proto.recognition.SpeechRecognitionChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recognition.SpeechRecognitionChunk, 1)
  );
};

/**
 * @param {!Array<!proto.recognition.SpeechRecognitionChunk>} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setChunksList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.recognition.SpeechRecognitionChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recognition.SpeechRecognitionChunk}
 */
proto.recognition.StreamingRecognitionResponse.prototype.addChunks = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.recognition.SpeechRecognitionChunk,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.clearChunksList = function () {
  return this.setChunksList([]);
};

/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getSessionId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setSessionId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string text = 3;
 * @return {string}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setText = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool final = 4;
 * @return {boolean}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getFinal = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setFinal = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional float quality_score = 5;
 * @return {number}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getQualityScore = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setQualityScore = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional bool answerphone_detected = 6;
 * @return {boolean}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getAnswerphoneDetected = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};

/**
 * @param {boolean} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setAnswerphoneDetected = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * optional SentimentsInfo sentiments_info = 7;
 * @return {?proto.recognition.SentimentsInfo}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getSentimentsInfo = function () {
  return /** @type{?proto.recognition.SentimentsInfo} */ (
    jspb.Message.getWrapperField(this, proto.recognition.SentimentsInfo, 7)
  );
};

/**
 * @param {?proto.recognition.SentimentsInfo|undefined} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setSentimentsInfo = function (value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.clearSentimentsInfo = function () {
  return this.setSentimentsInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.recognition.StreamingRecognitionResponse.prototype.hasSentimentsInfo = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional float words_per_second = 8;
 * @return {number}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getWordsPerSecond = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setWordsPerSecond = function (value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};

/**
 * optional string age_group = 9;
 * @return {string}
 */
proto.recognition.StreamingRecognitionResponse.prototype.getAgeGroup = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * @param {string} value
 * @return {!proto.recognition.StreamingRecognitionResponse} returns this
 */
proto.recognition.StreamingRecognitionResponse.prototype.setAgeGroup = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.SpeechRecognitionChunk.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.SpeechRecognitionChunk.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.SpeechRecognitionChunk} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.SpeechRecognitionChunk.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.SpeechRecognitionChunk}
 */
proto.recognition.SpeechRecognitionChunk.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.SpeechRecognitionChunk();
  return proto.recognition.SpeechRecognitionChunk.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.SpeechRecognitionChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.SpeechRecognitionChunk}
 */
proto.recognition.SpeechRecognitionChunk.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.SpeechRecognitionChunk.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.SpeechRecognitionChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.SpeechRecognitionChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.SpeechRecognitionChunk.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.recognition.SentimentsInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.recognition.SentimentsInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.recognition.SentimentsInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.recognition.SentimentsInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recognition.SentimentsInfo}
 */
proto.recognition.SentimentsInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recognition.SentimentsInfo();
  return proto.recognition.SentimentsInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recognition.SentimentsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recognition.SentimentsInfo}
 */
proto.recognition.SentimentsInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recognition.SentimentsInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.recognition.SentimentsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.recognition.SentimentsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.recognition.SentimentsInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

goog.object.extend(exports, proto.recognition);
